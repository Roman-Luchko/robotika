#include "Sensor.h"
#include "PositionLoader.h"
#include <fstream>  // Для работы с файлами

Define_Module(Sensor);

// Указатель на файл для записи
std::ofstream outputFile;

void Sensor::initialize()
{
    // Получаем индекс сенсора
    int index = getIndex();

    // Загружаем позицию сенсора из файла
    pos = PositionLoader::getInstance()->getSensorPosition(index);

    // Параметр интервала для отправки данных
    sendInterval = par("sendInterval");

    // Логируем информацию о сенсоре
    EV << "Sensor " << index << " initialized at position (" << pos.first << ", " << pos.second << ").\n";

    // Открываем файл для записи
    if (!outputFile.is_open()) {
        outputFile.open("transmission_times.csv", std::ios::out | std::ios::app); // Открываем файл для добавления данных
        if (!outputFile) {
            EV << "Error opening file for writing.\n";
            return;
        }

        // Записываем заголовки (если файл пустой)
        if (outputFile.tellp() == 0) {
            outputFile << "SensorID,TransmissionTime(s)\n";  // Заголовок CSV
        }
    }

    // Запланировать отправку данных всех сенсоров на время 0
    scheduleAt(0, new cMessage("sendData"));
}

void Sensor::handleMessage(cMessage *msg)
{
    if (strcmp(msg->getName(), "sendData") == 0) {
        // Получаем текущее время симуляции до отправки данных
        simtime_t sendTime = simTime();

        // Логируем отправку данных
        EV << "Sensor " << getIndex() << " sending data from position (" << pos.first << ", " << pos.second << ").\n";

        // Создаем сообщение данных
        cMessage* data = new cMessage("sensorData");

        // Отправляем сообщение
        send(data, "out");

        // Сохраняем время, когда отправлено сообщение
        simtime_t sendEventTime = simTime();

        // Планируем, чтобы сенсор подождал некоторое время и затем записал время, которое прошло.
        scheduleAt(sendEventTime + 0.001, new cMessage("waitForData"));

        // Запланировать следующее отправление данных с интервалом
        scheduleAt(simTime() + sendInterval, msg);
    }
    else if (strcmp(msg->getName(), "waitForData") == 0) {
        // Получаем текущее время, когда прошло время ожидания для обработки
        simtime_t endTime = simTime();
        simtime_t transmissionTime = endTime - (simTime() - 0.001); // Вычисляем время передачи (нужно для точности)

        // Логируем время передачи
        EV << "Sensor " << getIndex() << " sent data. Time taken for transmission: " << transmissionTime << " seconds.\n";

        // Записываем время передачи в файл
        if (outputFile.is_open()) {
            outputFile << getIndex() << "," << transmissionTime.dbl() << "\n"; // Записываем ID сенсора и время передачи
        }

        delete msg;  // Очистить сообщение
    }
}

Sensor::~Sensor() {
    // Закрыть файл при завершении работы симуляции
    if (outputFile.is_open()) {
        outputFile.close();
    }
}
