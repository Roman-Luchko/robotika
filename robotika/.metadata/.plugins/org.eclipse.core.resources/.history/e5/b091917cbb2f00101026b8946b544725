#include "Sensor.h"
#include "PositionLoader.h"

Define_Module(Sensor);

void Sensor::initialize()
{
    // Получаем индекс сенсора
    int index = getIndex();

    // Загружаем позицию сенсора из файла
    pos = PositionLoader::getInstance()->getSensorPosition(index);

    // Параметр интервала для отправки данных
    sendInterval = par("sendInterval");

    // Логируем информацию о сенсоре
    EV << "Sensor " << index << " initialized at position (" << pos.first << ", " << pos.second << ").\n";

    // Запланировать отправку данных всех сенсоров на время 0
    scheduleAt(0, new cMessage("sendData"));
}

void Sensor::handleMessage(cMessage *msg)
{
    if (strcmp(msg->getName(), "sendData") == 0) {
        // Логируем отправку данных
        EV << "Sensor " << getIndex() << " sending data from position (" << pos.first << ", " << pos.second << ").\n";

        // Получаем текущее время симуляции до отправки данных
        simtime_t sendTime = simTime();

        // Создаем сообщение данных
        cMessage* data = new cMessage("sensorData");

        // Отправляем сообщение
        send(data, "out");

        // Получаем время, когда данные были отправлены
        simtime_t transmissionTime = simTime() - sendTime;

        // Логируем время передачи
        EV << "Sensor " << getIndex() << " sent data. Time taken for transmission: " << transmissionTime << " seconds.\n";

        // Планируем следующее отправление данных с интервалом
        scheduleAt(simTime() + sendInterval, msg);
    }
}
