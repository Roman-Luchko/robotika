#include "Sensor.h"
#include "PositionLoader.h"

Define_Module(Sensor);

void Sensor::initialize()
{
    // Получаем индекс сенсора
    int index = getIndex();

    // Загружаем позицию сенсора
    pos = PositionLoader::getInstance()->getSensorPosition(index);

    // Параметр интервала для отправки данных
    sendInterval = par("sendInterval");

    // Логируем информацию о сенсоре
    EV << "Sensor " << index << " initialized at position (" << pos.first << ", " << pos.second << ").\n";

    // Запланировать глобальное событие отправки данных на время 0
    if (index == 0) {
        // Запланировать отправку данных всех сенсоров на момент времени 0 (только для одного сенсора, чтобы избежать дублирования)
        scheduleAt(0, new cMessage("sendAllData"));
    }
}

void Sensor::handleMessage(cMessage *msg)
{
    if (strcmp(msg->getName(), "sendAllData") == 0) {
        // Все сенсоры начинают отправлять данные одновременно
        EV << "Sensor " << getIndex() << " sending data from position (" << pos.first << ", " << pos.second << ").\n";

        // Создаем сообщение данных
        cMessage* data = new cMessage("sensorData");

        // Отправляем сообщение
        send(data, "out");

        // Планы для следующей отправки через интервал
        scheduleAt(simTime() + sendInterval, msg);
    }
}
