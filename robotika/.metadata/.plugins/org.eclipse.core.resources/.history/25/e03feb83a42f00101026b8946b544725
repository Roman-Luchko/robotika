#include "PositionLoader.h"
#include <fstream>
#include <sstream>
#include <stdexcept>
#include <omnetpp.h>

PositionLoader* PositionLoader::instance = nullptr;

PositionLoader::PositionLoader()
{
    std::ifstream file("positions.txt");
    std::string line;
    while (std::getline(file, line)) {
        if (line.empty() || line[0] == '#') continue;

        std::istringstream iss(line);
        std::string id;
        double x, y;
        iss >> id >> x >> y;

        if (id == "drone") {
            dronePosition = {x, y};
            EV << "Loaded drone at position (" << x << ", " << y << ")\n";
        } else {
            int sensorIndex = std::stoi(id);
            sensorPositions[sensorIndex] = {x, y};
            EV << "Loaded sensor " << sensorIndex << " at position (" << x << ", " << y << ")\n";
        }
    }
}

PositionLoader* PositionLoader::getInstance()
{
    if (!instance)
        instance = new PositionLoader();
    return instance;
}

std::pair<double, double> PositionLoader::getSensorPosition(int index)
{
    auto it = sensorPositions.find(index);
    if (it != sensorPositions.end()) {
        return it->second;
    } else {
        EV << "Error: Sensor index " << index << " not found\n";
        throw std::out_of_range("Sensor index out of range");
    }
}

std::pair<double, double> PositionLoader::getDronePosition()
{
    return dronePosition;
}
